---json
{"subject": "Dolce Restarted"}
---
<%
    function newest_first(event_a, event_b){
        return event_b.timeNano - event_a.timeNano;
    }

    function get_event_class(event){
        switch (event.Action) {
        case "start": return "success"
        case "die": return "error"
        case "kill": return "error"
        case "oom": return "error"
        case "stop": return "warning"
        case "pause": return "warning"
        case "unpause": return "success"
        case "health_status": return "warning"
        default: ""
        }
    }
%>
<% layout("./base.eta") %>

<h1>Hello,</h1>
<p>It appears that the Dolce service on <%= it.hostname %> restarted after not shutting down normally.</p>
<p>This means it may missed some events, namely it was blind starting <%= it.downtime_start.toLocaleString() %> until <%= it.downtime_end.toLocaleString() %>.</p>

<p>Here is a list of the events that happened in the meantime:</p>
<table>
    <tr><th>Container</th>&#009;<th>Action</th>&#009;<th>Time</th></tr>
    <% it.events_since_shutdown.toSorted(newest_first).forEach(event => { %>
    <tr><td><p><%= event.from %></p></td>&#009;<td><span class="<%= get_event_class(event) %>"><%= event.Action %></span></td>&#009;<td><%= new Date(event.time * 1000).toLocaleString() %></td></tr>
    <% }); %>
</table>
<p>However, this may be incomplete if docker restarted during the downtime.</p>

<p>If you knowingly killed the process you can ignore this message and use
    <code>`docker stop &lt;containername&gt;`</code>
the next time to avoid this message.</p>
